{"version":3,"sources":["sparql-service.ts"],"names":["fi","fi.seco","fi.seco.sparql","fi.seco.sparql.SparqlService","fi.seco.sparql.SparqlService.constructor","fi.seco.sparql.SparqlService.stringToSPARQLString","fi.seco.sparql.SparqlService.bindingsToObject","fi.seco.sparql.SparqlService.bindingToValue","fi.seco.sparql.SparqlService.bindingToString","fi.seco.sparql.SparqlService.check","fi.seco.sparql.SparqlService.checkUpdate","fi.seco.sparql.SparqlService.checkRest","fi.seco.sparql.SparqlService.get","fi.seco.sparql.SparqlService.post","fi.seco.sparql.SparqlService.put","fi.seco.sparql.SparqlService.delete","fi.seco.sparql.SparqlService.query","fi.seco.sparql.SparqlService.construct","fi.seco.sparql.SparqlService.update"],"mappings":"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","file":"sparql-service.js","sourcesContent":["angular.module('fi.seco.sparql', [])\nnamespace fi.seco.sparql {\n  'use strict'\n\n  export interface ISparqlBinding {\n    type: string,\n    value: string,\n    'xml:lang'?: string,\n    datatype?: string\n  }\n\n  export interface ISparqlBindingResult<BindingType extends {[id: string]: ISparqlBinding}> {\n    head: {\n      vars: string[],\n      link?: string[]\n    },\n    results: {\n      bindings: BindingType[]\n    }\n  }\n\n  export interface ISparqlAskResult {\n    boolean: boolean\n  }\n\n  export class SparqlService {\n    public static stringToSPARQLString(string): string {\n      return '\"' + string.replace(/\"/g, '\\\\\"') + '\"'\n    }\n    public static bindingsToObject<T>(result: {[id: string]: ISparqlBinding}): T {\n      let ret: {} = {}\n      for (let key in result) {\n        ret[key] = SparqlService.bindingToValue(result[key])\n      }\n      return <T>ret\n    }\n    public static bindingToValue(binding: ISparqlBinding): any {\n      if (!binding) return undefined\n      if (binding.type === 'uri') return binding.value\n      else if (binding.type === 'bnode') return binding.value\n      else if (binding.datatype) switch (binding.datatype) {\n        case 'http://www.w3.org/2001/XMLSchema#integer':\n        case 'http://www.w3.org/2001/XMLSchema#decimal': return parseInt(binding.value, 10)\n        case 'http://www.w3.org/2001/XMLSchema#float':\n        case 'http://www.w3.org/2001/XMLSchema#double': return parseFloat(binding.value)\n        case 'http://www.w3.org/2001/XMLSchema#boolean': return binding.value ? true : false\n        default:\n      }\n      return binding.value\n    }\n    public static bindingToString(binding: ISparqlBinding): string {\n      if (!binding) return 'UNDEF'\n      else {\n        let value: string = binding.value.replace(/\\\\/g, '\\\\\\\\').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\b]/g, '\\\\b').replace(/\\f/g, '\\\\f').replace(/\\\"/g, '\\\\\"').replace(/\\'/g, '\\\\\\'')\n        if (binding.type === 'uri') return '<' + value + '>'\n        else if (binding.type === 'bnode') return '_:' + value\n        else if (binding.datatype) switch (binding.datatype) {\n          case 'http://www.w3.org/2001/XMLSchema#integer':\n          case 'http://www.w3.org/2001/XMLSchema#decimal':\n          case 'http://www.w3.org/2001/XMLSchema#double':\n          case 'http://www.w3.org/2001/XMLSchema#boolean': return value\n          case 'http://www.w3.org/2001/XMLSchema#string': return '\"' + value + '\"'\n          default: return '\"' + value + '\"^^<' + binding.datatype + '>'\n        }\n        else if (binding['xml:lang']) return '\"' + value + '\"@' + binding['xml:lang']\n        else return '\"' + value + '\"'\n      }\n    }\n    constructor(private $http: angular.IHttpService, private $q: angular.IQService) {}\n    public check(endpoint: string, params?: {}): angular.IPromise<boolean> {\n      let deferred: angular.IDeferred<any> = this.$q.defer()\n      this.$http(\n        angular.extend(\n          {\n            method: 'GET',\n            url: endpoint,\n            params: { query: 'ASK {}' },\n            headers: { 'Accept': 'application/sparql-results+json' }\n          },\n          params\n        )\n      ).then(\n        (response: angular.IHttpPromiseCallbackArg<ISparqlAskResult>) => deferred.resolve(response.data.boolean === true)\n      , (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(false)\n      )\n      return deferred.promise;\n    }\n    public checkUpdate(endpoint: string, params?: {}): angular.IPromise<boolean> {\n      let deferred: angular.IDeferred<any> = this.$q.defer()\n      this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url: endpoint,\n            headers: { 'Content-Type' : 'application/sparql-update' },\n            data: 'INSERT DATA {}'\n          },\n          params\n        )\n      ).then(\n        (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(response.status === 204)\n      , (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(false)\n      )\n      return deferred.promise;\n    }\n    public checkRest(endpoint: string, params?: {}): angular.IPromise<boolean> {\n      let deferred: angular.IDeferred<any> = this.$q.defer()\n      this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url : endpoint + '?default',\n            data : '',\n            headers: { 'Content-Type' : 'text/turtle' }\n          },\n          params\n        )\n      ).then(\n        (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(response.status === 204)\n      , (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(false)\n      )\n      return deferred.promise;\n    }\n    public get(endpoint: string, graphIRI?: string, params?: {}): angular.IHttpPromise<string> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'GET',\n            url : endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''},\n            headers: { 'Accept' : 'text/turtle' }\n          },\n          params\n        )\n      )\n    }\n    public post(endpoint: string, graph: string, graphIRI?: string, params?: {}): angular.IHttpPromise<string> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url : endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''},\n            data: graph,\n            headers: { 'Content-Type' : 'text/turtle' }\n          },\n          params\n        )\n      )\n    }\n    public put(endpoint: string, graph: string, graphIRI?: string, params?: {}): angular.IHttpPromise<string> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'PUT',\n            url : endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''},\n            data: graph,\n            headers: { 'Content-Type' : 'text/turtle' }\n          },\n          params\n        )\n      )\n    }\n    public delete(endpoint: string, graphIRI: string, params?: {}): angular.IHttpPromise<string> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'DELETE',\n            url: endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''}\n          },\n          params\n        )\n      )\n    }\n    public query<T extends {[id: string]: ISparqlBinding}>(endpoint: string, query: string, params?: {}): angular.IHttpPromise<ISparqlBindingResult<T>> {\n      if (query.length <= 2048)\n        return this.$http(\n          angular.extend(\n            {\n              method: 'GET',\n              url: endpoint,\n              params: { query: query },\n              headers: { 'Accept' : 'application/sparql-results+json' }\n            },\n            params\n          )\n        )\n      else\n        return this.$http(\n          angular.extend(\n            {\n              method: 'POST',\n              url: endpoint,\n              data: query,\n              headers: {\n                'Content-Type': 'application/sparql-query',\n                'Accept' : 'application/sparql-results+json'\n              }\n            },\n            params\n          )\n        )\n    }\n    public construct(endpoint: string, query: string, params?: {}): angular.IPromise<string> {\n      if (query.length <= 2048)\n        return this.$http(\n          angular.extend(\n            {\n              method: 'GET',\n              url : endpoint,\n              params: { query: query },\n              headers: { 'Accept' : 'text/turtle' }\n            },\n            params\n          )\n        )\n      else\n        return this.$http(\n          angular.extend(\n            {\n              method: 'POST',\n              url: endpoint,\n              data: query,\n              headers: {\n                'Content-Type': 'application/sparql-query',\n                'Accept' : 'text/turtle'\n              }\n            },\n            params\n          )\n        )\n    }\n    public update(endpoint: string, query: string, params?: {}): angular.IPromise<string> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url: endpoint,\n            headers: { 'Content-Type' : 'application/sparql-update' },\n            data: query\n          },\n          params\n        )\n      )\n    }\n  }\n}\n"],"sourceRoot":"/source/"}