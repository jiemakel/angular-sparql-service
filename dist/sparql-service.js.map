{"version":3,"sources":["../src/sparql-service.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAA;AACpC,IAAU,EAAE,CA8PX;AA9PD,WAAU,EAAE;IAAC,IAAA,IAAI,CA8PhB;IA9PY,WAAA,IAAI;QAAC,IAAA,MAAM,CA8PvB;QA9PiB,WAAA,MAAM;YACtB,YAAY,CAAA;YAuBZ;gBAkDE,uBAAoB,KAA2B,EAAU,EAAqB;oBAA1D,UAAK,GAAL,KAAK,CAAsB;oBAAU,OAAE,GAAF,EAAE,CAAmB;gBAAG,CAAC;gBAjDpE,kCAAoB,GAAlC,UAAmC,MAAM;oBACvC,MAAM,CAAC,GAAG,GAAG,MAAM;yBAChB,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;yBACtB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;yBACpB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;yBACrB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;yBACrB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;yBACrB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;0BACpB,GAAG,CAAA;gBACT,CAAC;gBACa,8BAAgB,GAA9B,UAAkC,MAAsC;oBACtE,IAAI,GAAG,GAAO,EAAE,CAAA;oBAChB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;wBACvB,GAAG,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;oBACtD,CAAC;oBACD,MAAM,CAAI,GAAG,CAAA;gBACf,CAAC;gBACa,4BAAc,GAA5B,UAA6B,OAAuB;oBAClD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;wBAAC,MAAM,CAAC,SAAS,CAAA;oBAC9B,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC;wBAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAA;oBAChD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;wBAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAA;oBACvD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;wBAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACpD,KAAK,0CAA0C,CAAC;4BAChD,KAAK,0CAA0C,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;4BACnF,KAAK,wCAAwC,CAAC;4BAC9C,KAAK,yCAAyC,EAAE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;4BAChF,KAAK,0CAA0C,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,CAAA;4BACpF,QAAQ;wBACV,CAAC;oBACD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAA;gBACtB,CAAC;gBACa,6BAAe,GAA7B,UAA8B,OAAuB;oBACnD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;wBAAC,MAAM,CAAC,OAAO,CAAA;oBAC5B,IAAI,CAAC,CAAC;wBACJ,IAAI,KAAK,GAAW,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;wBACrN,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC;4BAAC,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,GAAG,CAAA;wBACpD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;4BAAC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAA;wBACtD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;4BAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACpD,KAAK,0CAA0C,CAAC;gCAChD,KAAK,0CAA0C,CAAC;gCAChD,KAAK,yCAAyC,CAAC;gCAC/C,KAAK,0CAA0C,EAAE,MAAM,CAAC,KAAK,CAAA;gCAC7D,KAAK,yCAAyC,EAAE,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,GAAG,CAAA;gCACxE,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC,QAAQ,GAAG,GAAG,CAAA;4BAC/D,CAAC;wBACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4BAAC,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;wBAC7E,IAAI;4BAAC,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,GAAG,CAAA;oBAC/B,CAAC;gBACH,CAAC;gBAEM,6BAAK,GAAZ,UAAa,QAAgB,EAAE,MAAW;oBACxC,IAAI,QAAQ,GAA2B,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAA;oBACtD,IAAI,CAAC,KAAK,CACR,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,KAAK;wBACb,GAAG,EAAE,QAAQ;wBACb,MAAM,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE;wBAC3B,OAAO,EAAE,EAAE,QAAQ,EAAE,iCAAiC,EAAE;qBACzD,EACD,MAAM,CACP,CACF,CAAC,IAAI,CACJ,UAAC,QAA2D,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,EAAhD,CAAgD,EACjH,UAAC,QAAiD,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAC/E,CAAA;oBACD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC1B,CAAC;gBACM,mCAAW,GAAlB,UAAmB,QAAgB,EAAE,MAAW;oBAC9C,IAAI,QAAQ,GAA2B,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAA;oBACtD,IAAI,CAAC,KAAK,CACR,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,MAAM;wBACd,GAAG,EAAE,QAAQ;wBACb,OAAO,EAAE,EAAE,cAAc,EAAG,2BAA2B,EAAE;wBACzD,IAAI,EAAE,gBAAgB;qBACvB,EACD,MAAM,CACP,CACF,CAAC,IAAI,CACJ,UAAC,QAAiD,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,EAAzC,CAAyC,EAChG,UAAC,QAAiD,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAC/E,CAAA;oBACD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC1B,CAAC;gBACM,iCAAS,GAAhB,UAAiB,QAAgB,EAAE,MAAW;oBAC5C,IAAI,QAAQ,GAA2B,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAA;oBACtD,IAAI,CAAC,KAAK,CACR,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,MAAM;wBACd,GAAG,EAAG,QAAQ,GAAG,UAAU;wBAC3B,IAAI,EAAG,EAAE;wBACT,OAAO,EAAE,EAAE,cAAc,EAAG,aAAa,EAAE;qBAC5C,EACD,MAAM,CACP,CACF,CAAC,IAAI,CACJ,UAAC,QAAiD,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,EAAzC,CAAyC,EAChG,UAAC,QAAiD,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAC/E,CAAA;oBACD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC1B,CAAC;gBACM,2BAAG,GAAV,UAAc,QAAgB,EAAE,QAAiB,EAAE,MAAW;oBAC5D,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,KAAK;wBACb,GAAG,EAAG,QAAQ;wBACd,MAAM,EAAE,QAAQ,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAC,SAAS,EAAE,EAAE,EAAC;wBACxD,OAAO,EAAE,EAAE,QAAQ,EAAG,aAAa,EAAE;qBACtC,EACD,MAAM,CACP,CACF,CAAA;gBACH,CAAC;gBACM,4BAAI,GAAX,UAAe,QAAgB,EAAE,KAAa,EAAE,QAAiB,EAAE,MAAW;oBAC5E,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,MAAM;wBACd,GAAG,EAAG,QAAQ;wBACd,MAAM,EAAE,QAAQ,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAC,SAAS,EAAE,EAAE,EAAC;wBACxD,IAAI,EAAE,KAAK;wBACX,OAAO,EAAE,EAAE,cAAc,EAAG,aAAa,EAAE;qBAC5C,EACD,MAAM,CACP,CACF,CAAA;gBACH,CAAC;gBACM,2BAAG,GAAV,UAAc,QAAgB,EAAE,KAAa,EAAE,QAAiB,EAAE,MAAW;oBAC3E,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,KAAK;wBACb,GAAG,EAAG,QAAQ;wBACd,MAAM,EAAE,QAAQ,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAC,SAAS,EAAE,EAAE,EAAC;wBACxD,IAAI,EAAE,KAAK;wBACX,OAAO,EAAE,EAAE,cAAc,EAAG,aAAa,EAAE;qBAC5C,EACD,MAAM,CACP,CACF,CAAA;gBACH,CAAC;gBACM,8BAAM,GAAb,UAAiB,QAAgB,EAAE,QAAgB,EAAE,MAAW;oBAC9D,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,QAAQ;wBAChB,GAAG,EAAE,QAAQ;wBACb,MAAM,EAAE,QAAQ,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAC,SAAS,EAAE,EAAE,EAAC;qBACzD,EACD,MAAM,CACP,CACF,CAAA;gBACH,CAAC;gBACM,6BAAK,GAAZ,UAAuD,QAAgB,EAAE,KAAa,EAAE,MAAW;oBACjG,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;4BACE,MAAM,EAAE,KAAK;4BACb,GAAG,EAAE,QAAQ;4BACb,MAAM,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;4BACxB,OAAO,EAAE,EAAE,QAAQ,EAAG,iCAAiC,EAAE;yBAC1D,EACD,MAAM,CACP,CACF,CAAA;oBACH,IAAI;wBACF,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;4BACE,MAAM,EAAE,MAAM;4BACd,GAAG,EAAE,QAAQ;4BACb,IAAI,EAAE,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC;4BAC1C,OAAO,EAAE;gCACP,cAAc,EAAE,mCAAmC;gCACnD,QAAQ,EAAG,iCAAiC;6BAC7C;yBACF,EACD,MAAM,CACP,CACF,CAAA;gBACL,CAAC;gBACM,iCAAS,GAAhB,UAAoB,QAAgB,EAAE,KAAa,EAAE,MAAW;oBAC9D,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;4BACE,MAAM,EAAE,KAAK;4BACb,GAAG,EAAG,QAAQ;4BACd,MAAM,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;4BACxB,OAAO,EAAE,EAAE,QAAQ,EAAG,aAAa,EAAE;yBACtC,EACD,MAAM,CACP,CACF,CAAA;oBACH,IAAI;wBACF,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;4BACE,MAAM,EAAE,MAAM;4BACd,GAAG,EAAE,QAAQ;4BACb,IAAI,EAAE,KAAK;4BACX,OAAO,EAAE;gCACP,cAAc,EAAE,0BAA0B;gCAC1C,QAAQ,EAAG,aAAa;6BACzB;yBACF,EACD,MAAM,CACP,CACF,CAAA;gBACL,CAAC;gBACM,8BAAM,GAAb,UAAiB,QAAgB,EAAE,KAAa,EAAE,MAAW;oBAC3D,MAAM,CAAC,IAAI,CAAC,KAAK,CACf,OAAO,CAAC,MAAM,CACZ;wBACE,MAAM,EAAE,MAAM;wBACd,GAAG,EAAE,QAAQ;wBACb,OAAO,EAAE,EAAE,cAAc,EAAG,2BAA2B,EAAE;wBACzD,IAAI,EAAE,KAAK;qBACZ,EACD,MAAM,CACP,CACF,CAAA;gBACH,CAAC;gBACH,oBAAC;YAAD,CArOA,AAqOC,IAAA;YArOY,oBAAa,gBAqOzB,CAAA;QACH,CAAC,EA9PiB,MAAM,GAAN,WAAM,KAAN,WAAM,QA8PvB;IAAD,CAAC,EA9PY,IAAI,GAAJ,OAAI,KAAJ,OAAI,QA8PhB;AAAD,CAAC,EA9PS,EAAE,KAAF,EAAE,QA8PX","file":"sparql-service.js","sourcesContent":["angular.module('fi.seco.sparql', [])\nnamespace fi.seco.sparql {\n  'use strict'\n\n  export interface ISparqlBinding {\n    type: string,\n    value: string,\n    'xml:lang'?: string,\n    datatype?: string\n  }\n\n  export interface ISparqlBindingResult<BindingType extends {[id: string]: ISparqlBinding}> {\n    head: {\n      vars: string[],\n      link?: string[]\n    },\n    results: {\n      bindings: BindingType[]\n    }\n  }\n\n  export interface ISparqlAskResult {\n    boolean: boolean\n  }\n\n  export class SparqlService {\n    public static stringToSPARQLString(string): string {\n      return '\"' + string\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\f/g, '\\\\f')\n        + '\"'\n    }\n    public static bindingsToObject<T>(result: {[id: string]: ISparqlBinding}): T {\n      let ret: {} = {}\n      for (let key in result) {\n        ret[key] = SparqlService.bindingToValue(result[key])\n      }\n      return <T>ret\n    }\n    public static bindingToValue(binding: ISparqlBinding): any {\n      if (!binding) return undefined\n      if (binding.type === 'uri') return binding.value\n      else if (binding.type === 'bnode') return binding.value\n      else if (binding.datatype) switch (binding.datatype) {\n        case 'http://www.w3.org/2001/XMLSchema#integer':\n        case 'http://www.w3.org/2001/XMLSchema#decimal': return parseInt(binding.value, 10)\n        case 'http://www.w3.org/2001/XMLSchema#float':\n        case 'http://www.w3.org/2001/XMLSchema#double': return parseFloat(binding.value)\n        case 'http://www.w3.org/2001/XMLSchema#boolean': return binding.value ? true : false\n        default:\n      }\n      return binding.value\n    }\n    public static bindingToString(binding: ISparqlBinding): string {\n      if (!binding) return 'UNDEF'\n      else {\n        let value: string = binding.value.replace(/\\\\/g, '\\\\\\\\').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\b]/g, '\\\\b').replace(/\\f/g, '\\\\f').replace(/\\\"/g, '\\\\\"').replace(/\\'/g, '\\\\\\'')\n        if (binding.type === 'uri') return '<' + value + '>'\n        else if (binding.type === 'bnode') return '_:' + value\n        else if (binding.datatype) switch (binding.datatype) {\n          case 'http://www.w3.org/2001/XMLSchema#integer':\n          case 'http://www.w3.org/2001/XMLSchema#decimal':\n          case 'http://www.w3.org/2001/XMLSchema#double':\n          case 'http://www.w3.org/2001/XMLSchema#boolean': return value\n          case 'http://www.w3.org/2001/XMLSchema#string': return '\"' + value + '\"'\n          default: return '\"' + value + '\"^^<' + binding.datatype + '>'\n        }\n        else if (binding['xml:lang']) return '\"' + value + '\"@' + binding['xml:lang']\n        else return '\"' + value + '\"'\n      }\n    }\n    constructor(private $http: angular.IHttpService, private $q: angular.IQService) {}\n    public check(endpoint: string, params?: {}): angular.IPromise<boolean> {\n      let deferred: angular.IDeferred<any> = this.$q.defer()\n      this.$http(\n        angular.extend(\n          {\n            method: 'GET',\n            url: endpoint,\n            params: { query: 'ASK {}' },\n            headers: { 'Accept': 'application/sparql-results+json' }\n          },\n          params\n        )\n      ).then(\n        (response: angular.IHttpPromiseCallbackArg<ISparqlAskResult>) => deferred.resolve(response.data.boolean === true)\n      , (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(false)\n      )\n      return deferred.promise;\n    }\n    public checkUpdate(endpoint: string, params?: {}): angular.IPromise<boolean> {\n      let deferred: angular.IDeferred<any> = this.$q.defer()\n      this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url: endpoint,\n            headers: { 'Content-Type' : 'application/sparql-update' },\n            data: 'INSERT DATA {}'\n          },\n          params\n        )\n      ).then(\n        (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(response.status === 204)\n      , (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(false)\n      )\n      return deferred.promise;\n    }\n    public checkRest(endpoint: string, params?: {}): angular.IPromise<boolean> {\n      let deferred: angular.IDeferred<any> = this.$q.defer()\n      this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url : endpoint + '?default',\n            data : '',\n            headers: { 'Content-Type' : 'text/turtle' }\n          },\n          params\n        )\n      ).then(\n        (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(response.status === 204)\n      , (response: angular.IHttpPromiseCallbackArg<string>) => deferred.resolve(false)\n      )\n      return deferred.promise;\n    }\n    public get<T>(endpoint: string, graphIRI?: string, params?: {}): angular.IHttpPromise<T> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'GET',\n            url : endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''},\n            headers: { 'Accept' : 'text/turtle' }\n          },\n          params\n        )\n      )\n    }\n    public post<T>(endpoint: string, graph: string, graphIRI?: string, params?: {}): angular.IHttpPromise<T> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url : endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''},\n            data: graph,\n            headers: { 'Content-Type' : 'text/turtle' }\n          },\n          params\n        )\n      )\n    }\n    public put<T>(endpoint: string, graph: string, graphIRI?: string, params?: {}): angular.IHttpPromise<T> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'PUT',\n            url : endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''},\n            data: graph,\n            headers: { 'Content-Type' : 'text/turtle' }\n          },\n          params\n        )\n      )\n    }\n    public delete<T>(endpoint: string, graphIRI: string, params?: {}): angular.IHttpPromise<T> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'DELETE',\n            url: endpoint,\n            params: graphIRI ? { graph: graphIRI } : {'default': ''}\n          },\n          params\n        )\n      )\n    }\n    public query<T extends {[id: string]: ISparqlBinding}>(endpoint: string, query: string, params?: {}): angular.IHttpPromise<ISparqlBindingResult<T>> {\n      if (query.length <= 2048)\n        return this.$http(\n          angular.extend(\n            {\n              method: 'GET',\n              url: endpoint,\n              params: { query: query },\n              headers: { 'Accept' : 'application/sparql-results+json' }\n            },\n            params\n          )\n        )\n      else\n        return this.$http(\n          angular.extend(\n            {\n              method: 'POST',\n              url: endpoint,\n              data: 'query=' + encodeURIComponent(query),\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept' : 'application/sparql-results+json'\n              }\n            },\n            params\n          )\n        )\n    }\n    public construct<T>(endpoint: string, query: string, params?: {}): angular.IHttpPromise<T> {\n      if (query.length <= 2048)\n        return this.$http(\n          angular.extend(\n            {\n              method: 'GET',\n              url : endpoint,\n              params: { query: query },\n              headers: { 'Accept' : 'text/turtle' }\n            },\n            params\n          )\n        )\n      else\n        return this.$http(\n          angular.extend(\n            {\n              method: 'POST',\n              url: endpoint,\n              data: query,\n              headers: {\n                'Content-Type': 'application/sparql-query',\n                'Accept' : 'text/turtle'\n              }\n            },\n            params\n          )\n        )\n    }\n    public update<T>(endpoint: string, query: string, params?: {}): angular.IHttpPromise<T> {\n      return this.$http(\n        angular.extend(\n          {\n            method: 'POST',\n            url: endpoint,\n            headers: { 'Content-Type' : 'application/sparql-update' },\n            data: query\n          },\n          params\n        )\n      )\n    }\n  }\n}\n"]}